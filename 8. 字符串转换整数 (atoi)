请你来实现一个 myAtoi(string s) 函数，使其能将字符串转换成一个 32 位有符号整数。

函数 myAtoi(string s) 的算法如下：

空格：读入字符串并丢弃无用的前导空格（" "）
符号：检查下一个字符（假设还未到字符末尾）为 '-' 还是 '+'。如果两者都不存在，则假定结果为正。
转换：通过跳过前置零来读取该整数，直到遇到非数字字符或到达字符串的结尾。如果没有读取数字，则结果为0。
舍入：如果整数数超过 32 位有符号整数范围 [−231,  231 − 1] ，需要截断这个整数，使其保持在这个范围内。具体来说，小于 −231 的整数应该被舍入为 −231 ，大于 231 − 1 的整数应该被舍入为 231 − 1 。
返回整数作为最终结果。

public class Solution {
        public int MyAtoi(string s)
        {
            s = s.Trim();
            if (s.Length <= 0)
            {
                return 0;
            }
            int isZhen = 1;
            int startindex = 0;
            if (s[0] == '-')
            {
                isZhen = -1;
                startindex = 1;
            }
            else if (s[0] == '+')
            {
                startindex = 1;
            }
            else if (!Char.IsDigit(s[0]))
            {
                return 0;
            }
            //只有+-值的情况
            if (startindex == s.Length)
            {
                return 0;
            }

            //除掉前置0
            while (startindex < s.Length && s[startindex] == '0')
            {
                startindex++;
            }

            if (startindex > s.Length)
            {
                return 0;
            }


            long result = 0;
            for (; startindex < s.Length; startindex++)
            {
                char c = s[startindex];
                if (!Char.IsDigit(c))
                {
                    break;
                }
                result = result * 10 + (c - '0');
                long v = result * isZhen;
                if (v >= int.MaxValue) 
                {
                    return int.MaxValue;

                }
                if (v <= int.MinValue) {
                    return int.MinValue;

                }
            }

            return (int)result * isZhen;

        }

}
