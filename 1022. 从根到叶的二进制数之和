给出一棵二叉树，其上每个结点的值都是 0 或 1 。每一条从根到叶的路径都代表一个从最高有效位开始的二进制数。

例如，如果路径为 0 -> 1 -> 1 -> 0 -> 1，那么它表示二进制数 01101，也就是 13 。
对树上的每一片叶子，我们都要找出从根到该叶子的路径所表示的数字。

返回这些数字之和。题目数据保证答案是一个 32 位 整数。

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
public class Solution {
        public int SumRootToLeaf(TreeNode root)
        {
            return SumRootToLeaf(root,0);
        }

        public int SumRootToLeaf(TreeNode root,int val)
        {
            if(root == null)
            {
                return 0;
            }

            val = (val << 1) | root.val;
            if(root.left == null && root.right == null)
            {
                return val;
            }

            return SumRootToLeaf(root.left, val) + SumRootToLeaf(root.right, val);
        }
}
